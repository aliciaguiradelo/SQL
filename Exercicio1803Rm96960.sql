set serveroutput on
set verify off

DROP TABLE FUNCIONARIO CASCADE CONSTRAINTS;
CREATE TABLE FUNCIONARIO (
CODIGO NUMBER(4),
NOME VARCHAR(7),
SALARIO NUMBER(5),
SALARIO_ANUAL NUMBER(15));

DROP TABLE AUDITORIA CASCADE CONSTRAINTS;
CREATE TABLE AUDITORIA (
CODIGO_FUNC NUMBER(4),
NOME_FUNC VARCHAR(7),
SALARIO_FUNC NUMBER(5),
DATA DATE,
TIPO_OPERACAO VARCHAR(10));

DROP TABLE DEPARTAMENTO CASCADE CONSTRAINTS;
CREATE TABLE DEPARTAMENTO (
CODIGO NUMBER(4),
NOME VARCHAR(7));

DROP TABLE DEPTO_FUNC CASCADE CONSTRAINTS;
CREATE TABLE DEPTO_FUNC (
COD_FUNC NUMBER(4),
COD_DEPTO NUMBER(4));

DROP TABLE PRODUTO CASCADE CONSTRAINTS;
CREATE TABLE PRODUTO (
CODIGO NUMBER(4),
NOME VARCHAR(7),
QNTD_PEDIDO NUMBER(4));

DROP TABLE PEDIDO CASCADE CONSTRAINTS;
CREATE TABLE PEDIDO (
CODIGO NUMBER(4),
COD_PROD NUMBER(4));


EXERCICIO 01.

CREATE OR REPLACE TRIGGER validar_salario
BEFORE INSERT ON FUNCIONARIO
FOR EACH ROW
BEGIN
    IF :NEW.salario < 1000 OR :NEW.salario > 10000 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Salário inválido. Digite um valor entre 1000 e 10000');
    END IF;
    
END; 

INSERT INTO FUNCIONARIO (CODIGO,NOME,SALARIO) VALUES (01,'ALICIA', 5000);
INSERT INTO FUNCIONARIO (CODIGO,NOME,SALARIO) VALUES (01,'ALICIA', 5);


EXERCICIO 02.

CREATE OR REPLACE TRIGGER registrar_auditoria_funcionario
AFTER INSERT OR UPDATE OR DELETE ON FUNCIONARIO
FOR EACH ROW
DECLARE
    v_tipo_operacao VARCHAR(10);
BEGIN
    If inserting then
        v_tipo_operacao := 'Insert';
    elsif updating then
        v_tipo_operacao := 'Update';
    elsif deleting then
        v_tipo_operacao := 'Delete';
    end if;

    INSERT INTO AUDITORIA (CODIGO_FUNC, NOME_FUNC, SALARIO_FUNC, DATA, TIPO_OPERACAO) VALUES (:NEW.CODIGO_FUNC, :NEW.nome_func, :NEW.salario_func, SYSDATE, v_tipo_operacao);
END; 


EXERCICIO 03.

CREATE OR REPLACE TRIGGER CALCULA_SALARIO_ANUAL
BEFORE INSERT OR UPDATE ON FUNCIONARIO
FOR EACH ROW
BEGIN
    :NEW.SALARIO_ANUAL := :NEW.salario * 12;
    
END; 

INSERT INTO FUNCIONARIO (CODIGO,NOME,SALARIO) VALUES (01,'ALICIA', 5000);

SELECT * FROM FUNCIONARIO



EXERCICIO 04.

CREATE OR REPLACE TRIGGER VALIDA_EXCLUSAO_DEPARTAMENTO
BEFORE DELETE ON DEPARTAMENTO
FOR EACH ROW
DECLARE
    v_tem_func number;
BEGIN

    select count(*) into v_tem_func from DEPTO_FUNC where COD_DEPTO = :OLD.CODIGO;
    if v_tem_func > 0 then
        RAISE_APPLICATION_ERROR(-20001, 'Não é possível deletar departamento pois tem um funcionario vinculado a ele');
    END IF;
    
END; 


EXERCICIO 05.

CREATE OR REPLACE TRIGGER CONTA_PEDIDO
AFTER INSERT ON PEDIDO
FOR EACH ROW

BEGIN
    
    :NEW.QNTD_PEDIDO := OLD.QNTD_PEDIDO + 1;

    UPDATE PRODUTO SET (:OLD.CODIGO, :OLD.NOME, :NEW.QNTD_PEDIDO);
END; 
























